import{_ as n,o as s,c as a,b as p}from"./app-c680e870.js";const t="/assets/soc_pt-13be5378.png",e={},o=p('<h2 id="基础soc-pt表样式" tabindex="-1"><a class="header-anchor" href="#基础soc-pt表样式" aria-hidden="true">#</a> 基础SOC PT表样式</h2><p><img src="'+t+`" alt="SOC PT Shell"></p><h2 id="代码实现1-qiaojuan-lv" tabindex="-1"><a class="header-anchor" href="#代码实现1-qiaojuan-lv" aria-hidden="true">#</a> 代码实现1 - qiaojuan.lv</h2><div class="language-sas line-numbers-mode" data-ext="sas"><pre class="language-sas"><code>
<span class="token comment">***Remove work lib;</span>
<span class="token step keyword">proc datasets</span> <span class="token proc-args"><span class="token arg keyword">lib</span><span class="token operator">=</span><span class="token arg-value">work</span> <span class="token arg keyword">memtype</span><span class="token operator">=</span><span class="token arg-value">all</span> <span class="token arg keyword">kill</span> <span class="token arg keyword">nolist</span><span class="token punctuation">;</span></span> <span class="token step keyword">quit</span><span class="token punctuation">;</span>
option nomprint nomlogic nosymbolgen<span class="token punctuation">;</span>
<span class="token comment">***clean log and output;</span>
dm <span class="token string">&#39;log&#39;</span> clear<span class="token punctuation">;</span>
dm <span class="token string">&#39;output&#39;</span> clear<span class="token punctuation">;</span>
<span class="token keyword">ods</span> noresults<span class="token punctuation">;</span>
 
<span class="token macro-keyword keyword">%let</span> pgmname<span class="token operator">=</span>T14_3_1_2<span class="token punctuation">;</span>
 
<span class="token comment">***create log file***;</span>
<span class="token operator">/</span><span class="token operator">*</span>proc printto log<span class="token operator">=</span><span class="token string">&quot;&amp;root.\\Production\\Tables\\log\\&amp;pgmname..log&quot;</span> new<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">/*run;*/</span>
 
option fmtsearch<span class="token operator">=</span><span class="token punctuation">(</span>work rawdata<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">*safety population;</span>
<span class="token step keyword">data</span> adsl<span class="token punctuation">;</span>  
    <span class="token keyword">set</span> adam<span class="token punctuation">.</span>adsl<span class="token punctuation">;</span> <span class="token keyword">where</span> saffl<span class="token operator">=</span><span class="token string">&#39;Y&#39;</span> <span class="token keyword">and</span> trt01an <span class="token operator-keyword operator">ne</span> <span class="token punctuation">.</span><span class="token punctuation">;</span> 
    trt<span class="token operator">=</span>trt01a<span class="token punctuation">;</span> trtn<span class="token operator">=</span>trt01an<span class="token punctuation">;</span>
    <span class="token keyword">output</span><span class="token punctuation">;</span> <span class="token comment">*single group;</span>
    <span class="token keyword">if</span> trtn<span class="token operator">&lt;=</span><span class="token number">4</span> <span class="token keyword">then do</span> trtn<span class="token operator">=</span><span class="token number">4.5</span><span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span> <span class="token comment">*treatment group overall;</span>
    trtn<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span> <span class="token comment">*overall;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sql</span> <span class="token proc-args"><span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span><span class="token proc-sql">
<span class="token sql language-sql">    select count(distinct trtn) into:trtnum from adsl;</span>
<span class="token sql language-sql">    create table pop as select trtn,count(subjid) as subj from adsl group by trtn;</span>
<span class="token sql language-sql">    select subj into: pop1-:pop%left(&amp;trtnum.) from pop;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>
<span class="token macro-keyword keyword">%put</span> <span class="token macro-variable">&amp;pop1</span><span class="token punctuation">.</span> <span class="token macro-variable">&amp;pop2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token comment">/*1. data from analysis datasets*/</span>
<span class="token macro-keyword keyword">%let</span> cond<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token step keyword">data</span> tab1<span class="token punctuation">;</span>
    <span class="token keyword">set</span> adam<span class="token punctuation">.</span>adae<span class="token punctuation">;</span>
    <span class="token keyword">where</span> saffl<span class="token operator">=</span><span class="token string">&#39;Y&#39;</span> <span class="token keyword">and</span> <span class="token macro-variable">&amp;cond</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token comment">/*    if 0;*/</span>
    trt<span class="token operator">=</span>trta<span class="token punctuation">;</span> trtn<span class="token operator">=</span>trtan<span class="token punctuation">;</span> soc<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>aesoc<span class="token punctuation">,</span><span class="token string">&#39;Uncoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pt<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>aedecod<span class="token punctuation">,</span><span class="token string">&#39;Uncoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    soc<span class="token operator">=</span>soc<span class="token punctuation">;</span> pt<span class="token operator">=</span>pt<span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span>
    soc<span class="token operator">=</span>soc<span class="token punctuation">;</span> pt<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span> 
    soc<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> pt<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span>
    <span class="token keyword">keep</span> subjid trt trtn soc pt<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">data</span> tab11<span class="token punctuation">;</span>
    <span class="token keyword">set</span> tab1<span class="token punctuation">;</span>
    <span class="token keyword">output</span><span class="token punctuation">;</span> <span class="token comment">*single group;</span>
    <span class="token keyword">if</span> trtn<span class="token operator">&lt;=</span><span class="token number">4</span> <span class="token keyword">then do</span> trtn<span class="token operator">=</span><span class="token number">4.5</span><span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span> <span class="token comment">*treatment group overall;</span>
    trtn<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span> <span class="token keyword">output</span><span class="token punctuation">;</span> <span class="token comment">*overall;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">*format for table display;</span>
<span class="token step keyword">proc format</span><span class="token punctuation">;</span>
    value trta
        <span class="token number">1</span><span class="token operator">=</span><span class="token string">&quot;1.0mg/kg&quot;</span>
        <span class="token number">2</span><span class="token operator">=</span><span class="token string">&quot;2.5mg/kg&quot;</span>
        <span class="token number">3</span><span class="token operator">=</span><span class="token string">&quot;5.0mg/kg&quot;</span>
        <span class="token number">4</span><span class="token operator">=</span><span class="token string">&quot;10.0mg/kg&quot;</span>
        <span class="token number">5</span><span class="token operator">=</span><span class="token string">&quot;Treatment Group Overall&quot;</span>
        <span class="token number">6</span><span class="token operator">=</span><span class="token string">&quot;Placebo&quot;</span>
		<span class="token number">7</span><span class="token operator">=</span><span class="token string">&quot;Overall&quot;</span>
		<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">*count subjid;</span>
<span class="token step keyword">proc sql</span> <span class="token proc-args"><span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span><span class="token proc-sql">
<span class="token sql language-sql">    create table tab1_freq as select soc,pt,trtn,count(subjid) as evt,count(distinct subjid) as subj from tab11 group by soc,pt,trtn;</span>
<span class="token sql language-sql">    create table tab2_freq as 
    select a.*,c.evt as totevt,c.subj as totsubj,d.evt as totevt2,d.subj as totsubj2,e.subj as pop from tab1_freq as a
    left join tab1_freq(where=(pt=&#39;&#39; and trtn in (99))) as c 
        on a.soc=c.soc
    left join tab1_freq(where=(trtn in (99))) as d 
        on a.soc=d.soc and a.pt=d.pt
    left join pop as e on a.trtn=e.trtn;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> tab3<span class="token punctuation">;</span>
    <span class="token keyword">set</span> tab2_freq<span class="token punctuation">;</span>
    evt<span class="token operator">=</span><span class="token function keyword">coalesce</span><span class="token punctuation">(</span>evt<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> subj<span class="token operator">=</span><span class="token function keyword">coalesce</span><span class="token punctuation">(</span>subj<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">*seq;</span>
    <span class="token keyword">if</span> subj<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> seq<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> subj<span class="token operator">=</span>pop <span class="token keyword">then</span> seq<span class="token operator">=</span><span class="token function keyword">catx</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span>subj<span class="token punctuation">,</span><span class="token string">&#39;(100)&#39;</span><span class="token punctuation">,</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> seq<span class="token operator">=</span><span class="token function keyword">cat</span><span class="token punctuation">(</span><span class="token function keyword">cats</span><span class="token punctuation">(</span>subj<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39; (&#39;</span><span class="token punctuation">,</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token function keyword">round</span><span class="token punctuation">(</span>subj<span class="token operator">/</span>pop<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;) &#39;</span><span class="token punctuation">,</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> soc<span class="token operator">=</span><span class="token string">&#39;Uncoded&#39;</span> <span class="token keyword">then do</span><span class="token punctuation">;</span> totevt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> totsubj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">tab</span><span class="token number">3</span><span class="token punctuation">;</span></span> <span class="token keyword">by</span> descending totsubj soc descending totsubj2 pt trtn<span class="token punctuation">;</span> <span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">tab</span><span class="token number">3</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">tab</span>3_<span class="token arg keyword">trans</span> <span class="token arg keyword">prefix</span><span class="token operator">=</span><span class="token arg-value">seq</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> descending totsubj soc descending totsubj2 pt<span class="token punctuation">;</span>
    id trtn<span class="token punctuation">;</span>
    <span class="token keyword">var</span> seq<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> final<span class="token punctuation">;</span>
    <span class="token keyword">set</span> tab3_trans<span class="token punctuation">;</span>
    <span class="token keyword">if</span> soc<span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then</span> catt<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&#39;TEAEs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> pt<span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">and</span> soc <span class="token operator-keyword operator">ne</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">then</span> catt<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span>soc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> catt<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;_LineIndent1.&quot;</span><span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">array</span> seq <span class="token punctuation">$</span><span class="token number">200</span> seq:<span class="token punctuation">;</span>
    <span class="token keyword">do over</span> seq<span class="token punctuation">;</span> <span class="token keyword">if</span> seq<span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then</span> seq<span class="token operator">=</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">keep</span> tot: soc pt<span class="token punctuation">;</span>
    <span class="token keyword">keep</span> catt seq:<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">final</span><span class="token punctuation">;</span></span> <span class="token keyword">by</span> descending totsubj soc descending totsubj2 pt<span class="token punctuation">;</span> <span class="token step keyword">run</span><span class="token punctuation">;</span>
 
<span class="token function keyword">%DDS_OUT</span><span class="token punctuation">(</span>data<span class="token operator">=</span>final<span class="token punctuation">,</span>out<span class="token operator">=</span>tlf<span class="token punctuation">.</span><span class="token macro-variable">&amp;pgmname</span><span class="token punctuation">.</span>_QJL<span class="token punctuation">,</span>varlist<span class="token operator">=</span>catt seq1 seq2 seq3 seq4 seq4_5 seq5 seq99<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码实现2-xueqin-li" tabindex="-1"><a class="header-anchor" href="#代码实现2-xueqin-li" aria-hidden="true">#</a> 代码实现2 - xueqin.li</h2><div class="language-sas line-numbers-mode" data-ext="sas"><pre class="language-sas"><code><span class="token macro-declaration"><span class="token keyword">%macro</span> aetable(pgmname=,pop=,cond=,anytxt=)</span><span class="token punctuation">;</span>

<span class="token comment">***Remove work lib;</span>
<span class="token step keyword">proc datasets</span> <span class="token proc-args"><span class="token arg keyword">lib</span><span class="token operator">=</span><span class="token arg-value">work</span> <span class="token arg keyword">memtype</span><span class="token operator">=</span><span class="token arg-value">all</span> <span class="token arg keyword">kill</span>  <span class="token arg keyword">nolist</span><span class="token punctuation">;</span></span> <span class="token step keyword">quit</span><span class="token punctuation">;</span>
option nomprint nomlogic nosymbolgen<span class="token punctuation">;</span>
<span class="token comment">***clean log and output;</span>
dm <span class="token string">&#39;log&#39;</span> clear<span class="token punctuation">;</span>
dm <span class="token string">&#39;output&#39;</span> clear<span class="token punctuation">;</span>
<span class="token keyword">ods</span> noresults<span class="token punctuation">;</span>
 
<span class="token macro-keyword keyword">%let</span> pgmname<span class="token operator">=</span><span class="token macro-variable">&amp;pgmname</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
 
<span class="token comment">***create log file***;</span>
<span class="token step keyword">proc printto</span> <span class="token proc-args"><span class="token arg keyword">log</span><span class="token operator">=</span><span class="token string">&quot;&amp;root.\\Production\\Tables\\log\\&amp;pgmname..log&quot;</span> <span class="token arg keyword">new</span><span class="token punctuation">;</span></span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>



<span class="token comment">**** get N;</span>

<span class="token step keyword">data</span> adsl<span class="token punctuation">;</span>
	<span class="token keyword">set</span> adam<span class="token punctuation">.</span><span class="token function keyword">adsl</span><span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">(</span><span class="token macro-variable">&amp;pop</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">&quot;Y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	groupn<span class="token operator">=</span>trt01an<span class="token punctuation">;</span>
	<span class="token keyword">group</span><span class="token operator">=</span>trt01a<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>


<span class="token step keyword">data</span> adsl1<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token function keyword">adsl</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> <span class="token function keyword">adsl</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b <span class="token keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span>groupn<span class="token operator">^=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function keyword">adsl</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> b <span class="token keyword">then</span> groupn<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">;</span><span class="token comment">*active;</span>
	<span class="token keyword">if</span> c <span class="token keyword">then</span> groupn<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span><span class="token punctuation">;</span>by groupn usubjid<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>


<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adsl</span><span class="token number">1</span> <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span><span class="token keyword">table</span> groupn<span class="token operator">/</span>out<span class="token operator">=</span>tot<span class="token punctuation">;</span>run<span class="token punctuation">;</span>

<span class="token step keyword">data</span> totdum<span class="token punctuation">;</span>do groupn<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">;</span>output<span class="token punctuation">;</span>end<span class="token punctuation">;</span>run<span class="token punctuation">;</span>

<span class="token step keyword">data</span> totfreq<span class="token punctuation">;</span>
	<span class="token keyword">merge</span> totdum tot<span class="token punctuation">;</span>
	<span class="token keyword">by</span> groupn<span class="token punctuation">;</span>
	<span class="token keyword">if</span> count<span class="token operator">=</span><span class="token punctuation">.</span> <span class="token keyword">then</span> tot<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> tot<span class="token operator">=</span>count<span class="token punctuation">;</span>
    <span class="token keyword">call</span> <span class="token function keyword">symputx</span><span class="token punctuation">(</span><span class="token string">&quot;TRT&quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">vvalue</span><span class="token punctuation">(</span>groupn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">keep</span> groupn tot<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>


<span class="token comment">**** get data from adae;</span>

<span class="token step keyword">data</span> adae0<span class="token punctuation">;</span>
	<span class="token keyword">length</span> soc pt <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">(</span><span class="token macro-variable">&amp;pop</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token string">&quot;Y&quot;</span> <span class="token keyword">and</span> TRTEMFL<span class="token operator">=</span><span class="token string">&quot;Y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	soc<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>AESOC<span class="token punctuation">,</span><span class="token string">&#39;Uncoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pt<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>aedecod<span class="token punctuation">,</span><span class="token string">&#39;Uncoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token macro-variable">&amp;cond</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>


<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span><span class="token number">0</span><span class="token punctuation">;</span></span><span class="token keyword">by</span> usubjid<span class="token punctuation">;</span>run<span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adsl</span><span class="token punctuation">;</span></span><span class="token keyword">by</span> usubjid<span class="token punctuation">;</span>run<span class="token punctuation">;</span>

<span class="token step keyword">data</span> ae_<span class="token punctuation">;</span>
	<span class="token keyword">merge</span> <span class="token function keyword">adae0</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> <span class="token function keyword">adsl</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b <span class="token keyword">keep</span><span class="token operator">=</span>usubjid groupn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">by</span> usubjid<span class="token punctuation">;</span>
	<span class="token keyword">if</span> a <span class="token keyword">and</span> b<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> ae<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token function keyword">ae_</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> <span class="token function keyword">ae_</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b <span class="token keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span>groupn<span class="token operator">^=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function keyword">ae_</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> b <span class="token keyword">then</span> groupn<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">;</span><span class="token comment">*active;</span>
	<span class="token keyword">if</span> c <span class="token keyword">then</span> groupn<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

  
<span class="token comment">***** ana;</span>

<span class="token macro-declaration"><span class="token keyword">%macro</span> count(byvar=,tabvar=,outdsn=,outdsn1=,outdsn2=)</span><span class="token punctuation">;</span>

<span class="token comment">***count;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">ae</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">ana</span> <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span><span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span> usubjid groupn<span class="token punctuation">;</span>run<span class="token punctuation">;</span>
<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">ana</span> <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
  <span class="token keyword">table</span> <span class="token macro-variable">&amp;tabvar</span><span class="token punctuation">.</span><span class="token operator">/</span>norow nocol <span class="token keyword">out</span><span class="token operator">=</span><span class="token macro-variable">&amp;outdsn</span><span class="token punctuation">.</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token comment">***;</span>

<span class="token comment">***event;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">ae</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">ana</span><span class="token number">1</span> <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span><span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span> AETERM aestdtc usubjid groupn<span class="token punctuation">;</span>run<span class="token punctuation">;</span>
<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">ana</span><span class="token number">1</span> <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
  <span class="token keyword">table</span> <span class="token macro-variable">&amp;tabvar</span><span class="token punctuation">.</span><span class="token operator">/</span>norow nocol <span class="token keyword">out</span><span class="token operator">=</span><span class="token macro-variable">&amp;outdsn1</span><span class="token punctuation">.</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token comment">***;</span>

<span class="token step keyword">data</span> <span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">merge</span> <span class="token macro-variable">&amp;outdsn</span><span class="token punctuation">.</span> <span class="token macro-variable">&amp;outdsn1</span><span class="token punctuation">.</span><span class="token punctuation">(</span>rename<span class="token operator">=</span><span class="token punctuation">(</span>count<span class="token operator">=</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">by</span> groupn <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sql</span> <span class="token proc-args"><span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span><span class="token proc-sql">
<span class="token sql language-sql">  select count(*) into :obs from &amp;outdsn2.;</span>
</span><span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%if</span> <span class="token macro-variable">&amp;obs</span><span class="token operator">=</span><span class="token number">0</span> <span class="token macro-keyword keyword">%then</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> _<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">length</span> soc pt cp <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> groupn<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">;</span>
    cp<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>et<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>soc<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>pt<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">output</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%end</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%else</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>
<span class="token step keyword">data</span> _<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">merge</span> <span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span> totfreq<span class="token punctuation">;</span>
  <span class="token keyword">by</span> groupn<span class="token punctuation">;</span>
  <span class="token keyword">length</span> cp <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token operator">^</span><span class="token function keyword">missing</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token keyword">then</span> et<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token operator">^</span><span class="token function keyword">missing</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token keyword">then do</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> count<span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> cp<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token keyword">else</span> <span class="token keyword">if</span> count<span class="token operator">=</span>tot <span class="token keyword">then</span> cp<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&#39; (100)&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> cp<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&#39; (&#39;</span><span class="token operator">||</span><span class="token function keyword">put</span><span class="token punctuation">(</span>count<span class="token operator">/</span>tot<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">5.1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">do</span><span class="token punctuation">;</span>cp<span class="token operator">=</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token macro-keyword keyword">%end</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%if</span> <span class="token macro-keyword keyword">%length</span><span class="token punctuation">(</span><span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token macro-keyword keyword">%then</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span>_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span></span> <span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">ae</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token function keyword">dum_</span><span class="token punctuation">(</span><span class="token arg keyword">keep</span><span class="token operator">=</span><span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span><span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">;</span>run<span class="token punctuation">;</span>
<span class="token macro-keyword keyword">%end</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> dum<span class="token punctuation">;</span>
  <span class="token macro-keyword keyword">%if</span> <span class="token macro-keyword keyword">%length</span><span class="token punctuation">(</span><span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token macro-keyword keyword">%then</span> <span class="token keyword">set</span> dum_<span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">do</span> groupn<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">;</span>
	 <span class="token keyword">output</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> _<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">merge</span> <span class="token function keyword">dum</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> _<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token macro-keyword keyword">%if</span> <span class="token macro-keyword keyword">%length</span><span class="token punctuation">(</span><span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token macro-keyword keyword">%then</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span> <span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span> groupn<span class="token punctuation">;</span><span class="token punctuation">%</span>end<span class="token punctuation">;</span>
    <span class="token macro-keyword keyword">%else</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>by groupn<span class="token punctuation">;</span><span class="token punctuation">%</span>end<span class="token punctuation">;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> a <span class="token keyword">and</span> <span class="token operator">^</span>b <span class="token keyword">then do</span><span class="token punctuation">;</span>
     cp<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	 et<span class="token operator">=</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span>_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">c</span>_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span> <span class="token arg keyword">prefix</span><span class="token operator">=</span><span class="token arg-value">trt</span><span class="token punctuation">;</span></span>
  <span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> cp<span class="token punctuation">;</span>
  id groupn<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span>_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">e</span>_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span> <span class="token arg keyword">prefix</span><span class="token operator">=</span><span class="token arg-value">e</span><span class="token punctuation">;</span></span>
  <span class="token keyword">by</span> <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> et<span class="token punctuation">;</span>
  id groupn<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">*** order of soc/pt ;</span>

<span class="token step keyword">data</span> c_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">set</span> c_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  order_c<span class="token operator">=</span><span class="token function keyword">input</span><span class="token punctuation">(</span><span class="token function keyword">scan</span><span class="token punctuation">(</span>trt99<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span><span class="token punctuation">;</span>by descending order_c <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> c_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">set</span> c_<span class="token macro-variable">&amp;outdsn2</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">by</span> descending  order_c <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  order<span class="token operator">=</span>_n_<span class="token punctuation">;</span>
<span class="token macro-keyword keyword">%if</span> <span class="token macro-keyword keyword">%length</span><span class="token punctuation">(</span><span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token macro-keyword keyword">%then</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>proc sort<span class="token punctuation">;</span>by <span class="token macro-variable">&amp;byvar</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token punctuation">%</span>end<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token comment">*** order end;</span>


<span class="token macro-end"><span class="token keyword">%mend</span> count</span><span class="token punctuation">;</span>

<span class="token function keyword">%count</span><span class="token punctuation">(</span>byvar<span class="token operator">=</span>           <span class="token punctuation">,</span>tabvar<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>groupn<span class="token punctuation">)</span></span>           <span class="token punctuation">,</span>outdsn<span class="token operator">=</span>any_case<span class="token punctuation">,</span>outdsn1<span class="token operator">=</span>any_event<span class="token punctuation">,</span>outdsn2<span class="token operator">=</span>any<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function keyword">%count</span><span class="token punctuation">(</span>byvar<span class="token operator">=</span>soc      <span class="token punctuation">,</span>tabvar<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>groupn*soc<span class="token punctuation">)</span></span>     <span class="token punctuation">,</span>outdsn<span class="token operator">=</span>soc_case<span class="token punctuation">,</span>outdsn1<span class="token operator">=</span>soc_event<span class="token punctuation">,</span>outdsn2<span class="token operator">=</span>soc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function keyword">%count</span><span class="token punctuation">(</span>byvar<span class="token operator">=</span>soc pt <span class="token punctuation">,</span>tabvar<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>groupn*soc*pt<span class="token punctuation">)</span></span><span class="token punctuation">,</span>outdsn<span class="token operator">=</span>pt_case <span class="token punctuation">,</span>outdsn1<span class="token operator">=</span>pt_event <span class="token punctuation">,</span>outdsn2<span class="token operator">=</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token step keyword">data</span> c_pt<span class="token punctuation">;</span>
  <span class="token keyword">merge</span> <span class="token function keyword">c_soc</span><span class="token punctuation">(</span>keep<span class="token operator">=</span>soc order rename<span class="token operator">=</span><span class="token punctuation">(</span>order<span class="token operator">=</span>order_soc<span class="token punctuation">)</span><span class="token punctuation">)</span> c_pt<span class="token punctuation">;</span>
  <span class="token keyword">by</span> soc<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>


<span class="token step keyword">data</span> <span class="token keyword">call</span><span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function keyword">c_any</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> <span class="token function keyword">c_soc</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b rename<span class="token operator">=</span><span class="token punctuation">(</span>order<span class="token operator">=</span>order_soc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function keyword">c_pt</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> a <span class="token keyword">then do</span><span class="token punctuation">;</span>ORDER_SOC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>soc<span class="token operator">=</span><span class="token string">&quot;&amp;anytxt.&quot;</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
  <span class="token keyword">if</span> a <span class="token keyword">then</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span> <span class="token keyword">if</span> b <span class="token keyword">then</span> flag<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	 <span class="token keyword">else</span> <span class="token keyword">if</span> c <span class="token keyword">then</span> flag<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token function keyword">cmiss</span><span class="token punctuation">(</span>soc<span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>  
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> eall<span class="token punctuation">;</span>
  <span class="token keyword">set</span> <span class="token function keyword">e_any</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> <span class="token function keyword">e_soc</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b<span class="token punctuation">)</span> <span class="token function keyword">e_pt</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> a <span class="token keyword">then</span> soc<span class="token operator">=</span><span class="token string">&quot;&amp;anytxt.&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> a <span class="token keyword">then</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span> <span class="token keyword">if</span> b <span class="token keyword">then</span> flag<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	 <span class="token keyword">else</span> <span class="token keyword">if</span> c <span class="token keyword">then</span> flag<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token function keyword">cmiss</span><span class="token punctuation">(</span>soc<span class="token punctuation">,</span>pt<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> all<span class="token punctuation">;</span>
  <span class="token keyword">merge</span> <span class="token function keyword">call</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>_name_<span class="token punctuation">)</span> <span class="token function keyword">eall</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>_name_<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">by</span> flag  soc  pt<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">*** final ;</span>

<span class="token step keyword">data</span> final<span class="token punctuation">;</span>
  <span class="token keyword">set</span> all<span class="token punctuation">;</span>
  <span class="token keyword">length</span> col1<span class="token operator">-</span>col2 <span class="token punctuation">$</span><span class="token number">100</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> flag <span class="token operator-keyword operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span> col1<span class="token operator">=</span><span class="token function keyword">strip</span><span class="token punctuation">(</span>soc<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">else</span> <span class="token keyword">if</span> flag<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">then</span> col1<span class="token operator">=</span><span class="token string">&quot;&amp;_LineIndent1.&quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  col2<span class="token operator">=</span><span class="token string">&#39;n (%)&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token function keyword">upcase</span><span class="token punctuation">(</span>soc<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&quot;UNCODED&quot;</span> <span class="token keyword">then</span> order_soc<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>

  <span class="token keyword">array</span> trt <span class="token punctuation">$</span> TRT1<span class="token operator">-</span>TRT5 TRT19 TRT99<span class="token punctuation">;</span>
  <span class="token keyword">array</span> eve <span class="token punctuation">$</span> E1<span class="token operator">-</span>E5 E19 E99<span class="token punctuation">;</span>
  <span class="token keyword">array</span> te <span class="token punctuation">$</span><span class="token number">100</span><span class="token punctuation">.</span> TRTE1<span class="token operator">-</span>TRTE5 TRTE19 TRTE99 <span class="token punctuation">;</span>
  <span class="token keyword">do</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token function keyword">dim</span><span class="token punctuation">(</span>trt<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token function keyword">te</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token function keyword">trt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function keyword">eve</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token function keyword">te</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&quot;00&quot;</span> <span class="token keyword">then</span> <span class="token function keyword">te</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">final</span><span class="token punctuation">;</span></span> <span class="token keyword">by</span> order_soc soc order pt<span class="token punctuation">;</span> <span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token function keyword">%dds_out</span><span class="token punctuation">(</span>data<span class="token operator">=</span>final<span class="token punctuation">,</span> <span class="token keyword">out</span><span class="token operator">=</span>tlf<span class="token punctuation">.</span><span class="token macro-variable">&amp;pgmname</span><span class="token punctuation">.</span><span class="token punctuation">,</span> varlist<span class="token operator">=</span>COL1 trte1 trte2 trte3 trte4 trte19 trte5 trte99<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token step keyword">data</span> final<span class="token punctuation">;</span>
	<span class="token keyword">set</span> final<span class="token punctuation">;</span>
	pg<span class="token operator">=</span><span class="token function keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_n_<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
	seq<span class="token operator">=</span>_n_<span class="token punctuation">;</span>
	<span class="token keyword">temp</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token punctuation">%</span><span class="token operator">*</span>deal with <span class="token keyword">when</span> pg<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token keyword">and</span> first obs is PT <span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">final</span><span class="token punctuation">;</span></span> <span class="token keyword">by</span> pg seq<span class="token punctuation">;</span> <span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">data</span> final<span class="token punctuation">;</span> <span class="token keyword">set</span> final<span class="token punctuation">;</span> <span class="token keyword">by</span> pg seq<span class="token punctuation">;</span>
	<span class="token keyword">if</span> first<span class="token punctuation">.</span>pg <span class="token keyword">and</span> pg<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token keyword">and</span> COL1 <span class="token operator-keyword operator">ne</span> soc <span class="token keyword">then do</span><span class="token punctuation">;</span>
		fl<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		COL1<span class="token operator">=</span><span class="token function keyword">strip</span><span class="token punctuation">(</span>soc<span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&#39;~\\par &#39;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span>COL1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 
<span class="token step keyword">proc printto</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
 
<span class="token comment">***check the log;</span>
<span class="token function keyword">%m_chklog</span><span class="token punctuation">(</span>pgm_type<span class="token operator">=</span>Tables<span class="token punctuation">,</span>pgm_name<span class="token operator">=</span><span class="token macro-variable">&amp;pgmname</span><span class="token punctuation">,</span>serv<span class="token operator">=</span>Production<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro-end"><span class="token keyword">%mend</span> aetable</span><span class="token punctuation">;</span>

<span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_1_2_XQL<span class="token punctuation">,</span>pop<span class="token operator">=</span>SAFFL<span class="token punctuation">,</span>cond<span class="token operator">=</span>TRTEMFL<span class="token operator">=</span><span class="token string">&quot;Y&quot;</span><span class="token punctuation">,</span>anytxt<span class="token operator">=</span>TEAEs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">/</span><span class="token operator">*</span><span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_1_3<span class="token punctuation">,</span>pop<span class="token operator">=</span>SAFFL<span class="token punctuation">,</span>cond<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>DISTRTFL=&quot;Y&quot; and upcase<span class="token punctuation">(</span>AEREL<span class="token punctuation">)</span></span><span class="token operator">=</span><span class="token string">&quot;RELATED&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">/*	anytxt=At Least One Treatment-related TEAE Leading to Discontinuation of Study Drug);*/</span>
<span class="token operator">/</span><span class="token operator">*</span><span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_1_6<span class="token punctuation">,</span>pop<span class="token operator">=</span>SAFFL<span class="token punctuation">,</span>cond<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>DISSTDFL=&quot;Y&quot; and upcase<span class="token punctuation">(</span>AEREL<span class="token punctuation">)</span></span><span class="token operator">=</span><span class="token string">&quot;RELATED&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">/*	anytxt=At Least One TEAE Leading to Discontinuation of Study);*/</span>
<span class="token operator">/</span><span class="token operator">*</span><span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_2_1<span class="token punctuation">,</span>pop<span class="token operator">=</span>SAFFL<span class="token punctuation">,</span>cond<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>AESER=&quot;Y&quot;<span class="token punctuation">)</span></span><span class="token punctuation">,</span>anytxt<span class="token operator">=</span>At Least One Serious TEAE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token operator">/</span><span class="token operator">*</span><span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_2_2<span class="token punctuation">,</span>pop<span class="token operator">=</span>SAFFL<span class="token punctuation">,</span>cond<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>AESER=&quot;Y&quot; and upcase<span class="token punctuation">(</span>AEREL<span class="token punctuation">)</span></span><span class="token operator">=</span><span class="token string">&quot;RELATED&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">/*	anytxt=At Least One Treatment-related Serious TEAE);*/</span>
<span class="token operator">/</span><span class="token operator">*</span><span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_2_3<span class="token punctuation">,</span>pop<span class="token operator">=</span>SAFFL<span class="token punctuation">,</span>cond<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>AESDTH=&quot;Y&quot; and upcase<span class="token punctuation">(</span>AEREL<span class="token punctuation">)</span></span><span class="token operator">=</span><span class="token string">&quot;RELATED&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">/*	anytxt=At Least One Treatment-related TEAE Leading to Death);*/</span>
<span class="token operator">/</span><span class="token operator">*</span><span class="token function keyword">%aetable</span><span class="token punctuation">(</span>pgmname<span class="token operator">=</span>T14_3_2_4<span class="token punctuation">,</span>pop<span class="token operator">=</span>DLTFL<span class="token punctuation">,</span>cond<span class="token operator">=</span><span class="token macro-string-functions"><span class="token function keyword">%str</span><span class="token punctuation">(</span>AEDLT=&quot;Y&quot;<span class="token punctuation">)</span></span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span>
<span class="token comment">/*	anytxt=At Least One DLT TEAE);*/</span>

<span class="token keyword">ods</span> results on<span class="token punctuation">;</span> <span class="token step keyword">proc compare</span> base<span class="token operator">=</span>tlf<span class="token punctuation">.</span>T14_3_1_2_XQL comp<span class="token operator">=</span>tlf<span class="token punctuation">.</span>T14_3_1_2_QJL warning listall crit<span class="token operator">=</span><span class="token number">0.000000001</span><span class="token punctuation">;</span> <span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token comment">/*ods results on; proc compare base=tlf.T14_3_1_3 comp=tlfqc.qT14_3_1_3 warning listall crit=0.000000001; run;*/</span>
<span class="token comment">/*ods results on; proc compare base=tlf.T14_3_1_6 comp=tlfqc.qT14_3_1_6 warning listall crit=0.000000001; run;*/</span>
<span class="token comment">/*ods results on; proc compare base=tlf.T14_3_2_1 comp=tlfqc.qT14_3_2_1 warning listall crit=0.000000001; run;*/</span>
<span class="token comment">/*ods results on; proc compare base=tlf.T14_3_2_2 comp=tlfqc.qT14_3_2_2 warning listall crit=0.000000001; run;*/</span>
<span class="token comment">/*ods results on; proc compare base=tlf.T14_3_2_3 comp=tlfqc.qT14_3_2_3 warning listall crit=0.000000001; run;*/</span>
<span class="token comment">/*ods results on; proc compare base=tlf.T14_3_2_4 comp=tlfqc.qT14_3_2_4 warning listall crit=0.000000001; run;*/</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码实现3-mengshan-lin" tabindex="-1"><a class="header-anchor" href="#代码实现3-mengshan-lin" aria-hidden="true">#</a> 代码实现3 - mengshan.lin</h2><div class="language-sas line-numbers-mode" data-ext="sas"><pre class="language-sas"><code>
<span class="token comment">***Remove work lib;</span>
<span class="token step keyword">proc datasets</span> <span class="token proc-args"><span class="token arg keyword">lib</span><span class="token operator">=</span><span class="token arg-value">work</span> <span class="token arg keyword">memtype</span><span class="token operator">=</span><span class="token arg-value">all</span> <span class="token arg keyword">kill</span> <span class="token arg keyword">nolist</span><span class="token punctuation">;</span></span> <span class="token step keyword">quit</span><span class="token punctuation">;</span>
option nomprint nomlogic nosymbolgen<span class="token punctuation">;</span>
<span class="token comment">***clean log and output;</span>
dm <span class="token string">&#39;log&#39;</span> clear<span class="token punctuation">;</span>
dm <span class="token string">&#39;output&#39;</span> clear<span class="token punctuation">;</span>
<span class="token keyword">ods</span> noresults<span class="token punctuation">;</span>
 
<span class="token macro-keyword keyword">%let</span> pgmname<span class="token operator">=</span>T14_3_1_2<span class="token punctuation">;</span>
 
<span class="token comment">***create log file***;</span>
<span class="token step keyword">proc printto</span> <span class="token proc-args"><span class="token arg keyword">log</span><span class="token operator">=</span><span class="token string">&quot;&amp;root.\\Production\\Tables\\log\\&amp;pgmname..log&quot;</span> <span class="token arg keyword">new</span><span class="token punctuation">;</span></span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
 
option fmtsearch<span class="token operator">=</span><span class="token punctuation">(</span>work rawdata<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">*subset adsl;</span>
<span class="token step keyword">data</span> adsl<span class="token punctuation">;</span>
    <span class="token keyword">set</span> adam<span class="token punctuation">.</span>adsl<span class="token punctuation">;</span>
	trta<span class="token operator">=</span>trt01a<span class="token punctuation">;</span>trtan<span class="token operator">=</span>trt01an<span class="token punctuation">;</span>
    <span class="token keyword">if</span> SAFFL <span class="token operator-keyword operator">eq</span> <span class="token string">&quot;Y&quot;</span> <span class="token keyword">and</span> trtan <span class="token operator-keyword operator">ne</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>
    <span class="token keyword">keep</span> usubjid trtan trta<span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span><span class="token punctuation">;</span>by trtan trta usubjid<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> active<span class="token punctuation">;</span>
     <span class="token keyword">set</span> adsl<span class="token punctuation">;</span>
	 <span class="token keyword">where</span> <span class="token function keyword">index</span><span class="token punctuation">(</span>trta<span class="token punctuation">,</span><span class="token string">&quot;Placebo&quot;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	 <span class="token keyword">if</span> trta<span class="token operator">^=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then do</span><span class="token punctuation">;</span>trta<span class="token operator">=</span><span class="token string">&quot;Active&quot;</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
	 <span class="token keyword">if</span> trtp<span class="token operator">^=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then do</span><span class="token punctuation">;</span>trtp<span class="token operator">=</span><span class="token string">&quot;Active&quot;</span><span class="token punctuation">;</span>trtpn<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> adsl_<span class="token punctuation">;</span>
    <span class="token keyword">set</span> adsl<span class="token punctuation">;</span>
	<span class="token keyword">output</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> adsl<span class="token punctuation">;</span>
	trta<span class="token operator">=</span><span class="token string">&quot;TOTAL&quot;</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>
	<span class="token keyword">output</span><span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span><span class="token punctuation">;</span>by trtan trta usubjid<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> adsl1<span class="token punctuation">;</span>
    <span class="token keyword">set</span> adsl_ active<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">/*1. Number of Subjects in total*/</span>
<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adsl</span><span class="token number">1</span> <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
    <span class="token keyword">table</span> trtan<span class="token operator">*</span>trta<span class="token operator">/</span>out<span class="token operator">=</span>total_n<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token step keyword">data</span> total<span class="token punctuation">;</span>
    <span class="token keyword">set</span> total_n<span class="token punctuation">;</span>
    total<span class="token operator">=</span>count<span class="token punctuation">;</span>
    <span class="token keyword">call</span> <span class="token function keyword">symput</span><span class="token punctuation">(</span><span class="token string">&quot;trt&quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>trtan<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">drop</span> percent count<span class="token punctuation">;</span>
<span class="token step keyword">proc sort</span><span class="token punctuation">;</span>by trtan trta<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc format</span><span class="token punctuation">;</span>
    value trta
        <span class="token number">1</span><span class="token operator">=</span><span class="token string">&quot;1.0mg/kg&quot;</span>
        <span class="token number">2</span><span class="token operator">=</span><span class="token string">&quot;2.5mg/kg&quot;</span>
        <span class="token number">3</span><span class="token operator">=</span><span class="token string">&quot;5.0mg/kg&quot;</span>
        <span class="token number">4</span><span class="token operator">=</span><span class="token string">&quot;10.0mg/kg&quot;</span>
        <span class="token number">5</span><span class="token operator">=</span><span class="token string">&quot;Placebo&quot;</span>
		<span class="token number">999</span><span class="token operator">=</span><span class="token string">&quot;TOTAL&quot;</span>
		<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">*subset adae;</span>
<span class="token step keyword">data</span> adae<span class="token punctuation">;</span>
	<span class="token keyword">length</span> aesoc aedecod <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span><span class="token punctuation">;</span>  
	<span class="token comment">/*Treatment group    Active group                               Total group*/</span>
    <span class="token keyword">set</span> adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span>     adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b <span class="token keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span>trta <span class="token operator-keyword operator">ne</span> <span class="token string">&#39;Placebo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">if</span> SAFFL<span class="token operator">=</span><span class="token string">&quot;Y&quot;</span> <span class="token keyword">and</span> trtemfl<span class="token operator">=</span><span class="token string">&quot;Y&quot;</span> <span class="token punctuation">;</span>

	aesoc<span class="token operator">=</span><span class="token function keyword">ifc</span><span class="token punctuation">(</span>aesoc<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token punctuation">,</span><span class="token string">&#39;Uncoded&#39;</span><span class="token punctuation">,</span>aesoc<span class="token punctuation">)</span><span class="token punctuation">;</span>
	aedecod<span class="token operator">=</span><span class="token function keyword">ifc</span><span class="token punctuation">(</span>aedecod<span class="token operator">=</span><span class="token string">&quot;&quot;</span> <span class="token punctuation">,</span><span class="token string">&#39;Uncoded&#39;</span><span class="token punctuation">,</span>aedecod<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> b <span class="token keyword">then do</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">;</span>trta<span class="token operator">=</span><span class="token string">&#39;Active&#39;</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
	<span class="token keyword">if</span> c <span class="token keyword">then do</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>trta<span class="token operator">=</span><span class="token string">&#39;TOTAL&#39;</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
	<span class="token keyword">keep</span> usubjid trta trtan aesoc aedecod<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%let</span> nobs<span class="token operator">=</span><span class="token macro-variable">&amp;sysnobs</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%if</span> <span class="token macro-variable">&amp;nobs</span> <span class="token operator-keyword operator">ne</span> <span class="token number">0</span> <span class="token macro-keyword keyword">%then</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>
<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span>  <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
	 <span class="token keyword">table</span> trtan<span class="token operator">*</span>trta <span class="token operator">/</span> <span class="token keyword">out</span><span class="token operator">=</span><span class="token function keyword">subm_1_1</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token keyword">table</span> aesoc<span class="token operator">*</span>trtan<span class="token operator">*</span>trta <span class="token operator">/</span> <span class="token keyword">out</span><span class="token operator">=</span><span class="token function keyword">subm_2_1</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token keyword">table</span> aesoc<span class="token operator">*</span>aedecod<span class="token operator">*</span>trtan<span class="token operator">*</span>trta <span class="token operator">/</span> <span class="token keyword">out</span><span class="token operator">=</span><span class="token function keyword">subm_3_1</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">***Subjects With At Least One TEAE;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">adae</span>_1_1 <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> usubjid trtan<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span>_1_1 <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
	 <span class="token keyword">table</span> trtan<span class="token operator">*</span>trta <span class="token operator">/</span> <span class="token keyword">out</span><span class="token operator">=</span><span class="token function keyword">sub_1_1</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">***Subjects With At Least One TEAE by SOC;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">adae</span>_2_1 <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> usubjid trtan aesoc<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span>_2_1 <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
	 <span class="token keyword">table</span> trtan<span class="token operator">*</span>trta<span class="token operator">*</span>aesoc <span class="token operator">/</span> <span class="token keyword">out</span><span class="token operator">=</span><span class="token function keyword">sub_2_1</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">***Subjects With At Least One TEAE by SOC/PT;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">adae</span>_3_1 <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> usubjid trtan aesoc aedecod<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc freq</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span>_3_1 <span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span>
	 <span class="token keyword">table</span> trtan<span class="token operator">*</span>trta<span class="token operator">*</span>aesoc<span class="token operator">*</span>aedecod<span class="token operator">/</span> <span class="token keyword">out</span><span class="token operator">=</span><span class="token function keyword">sub_3_1</span><span class="token punctuation">(</span>drop<span class="token operator">=</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> subm<span class="token punctuation">;</span>
	<span class="token keyword">set</span>  <span class="token function keyword">subm_1_1</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> <span class="token function keyword">subm_2_1</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span>   <span class="token function keyword">subm_3_1</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>e<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">group</span><span class="token operator">=</span> a<span class="token operator">+</span>c<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>e<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> sub<span class="token punctuation">;</span>
	<span class="token keyword">set</span>  <span class="token function keyword">sub_1_1</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span>   <span class="token function keyword">sub_2_1</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span>   <span class="token function keyword">sub_3_1</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>e<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">group</span><span class="token operator">=</span> a<span class="token operator">+</span>c<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>e<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">subm</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc aedecod trtan <span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">sub</span> <span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc aedecod trtan <span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> sub2<span class="token punctuation">;</span>
	<span class="token keyword">length</span> counts deno <span class="token punctuation">$</span><span class="token number">40</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
	<span class="token keyword">merge</span> sub <span class="token function keyword">subm</span><span class="token punctuation">(</span>rename<span class="token operator">=</span><span class="token punctuation">(</span>count<span class="token operator">=</span>m<span class="token punctuation">)</span> <span class="token keyword">drop</span><span class="token operator">=</span>trta<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc aedecod trtan <span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token keyword">group</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">and</span> aesoc<span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then</span> aesoc<span class="token operator">=</span><span class="token string">&#39;TEAEs&#39;</span><span class="token punctuation">;</span>

	<span class="token comment">***calculate frequece;</span>
	deno<span class="token operator">=</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">symget</span><span class="token punctuation">(</span><span class="token string">&#39;trt&#39;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>trtan<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> count <span class="token operator-keyword operator">ne</span> <span class="token punctuation">.</span> <span class="token keyword">then</span> cnt <span class="token operator">=</span> count<span class="token operator">/</span><span class="token function keyword">input</span><span class="token punctuation">(</span>deno<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> count <span class="token operator-keyword operator">ne</span> <span class="token punctuation">.</span> <span class="token keyword">and</span> <span class="token number">0.01</span><span class="token operator">&lt;</span>cnt <span class="token operator">&lt;=</span> <span class="token number">1</span>  <span class="token keyword">then</span> counts<span class="token operator">=</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot; (&quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token function keyword">round</span><span class="token punctuation">(</span>cnt<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot;) &quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> count <span class="token operator-keyword operator">ne</span> <span class="token punctuation">.</span> <span class="token keyword">and</span> <span class="token number">0</span><span class="token operator">&lt;</span>cnt <span class="token operator">&lt;</span><span class="token number">0.01</span> <span class="token keyword">then</span> counts<span class="token operator">=</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot; (&quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span><span class="token function keyword">round</span><span class="token punctuation">(</span>cnt<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token string">&quot;) &quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">if</span> count <span class="token operator-keyword operator">eq</span> <span class="token number">0</span> <span class="token keyword">then</span> counts<span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">***create temp;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">sub</span><span class="token number">2</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token function keyword">temps</span><span class="token punctuation">(</span><span class="token arg keyword">keep</span><span class="token operator">=</span><span class="token arg-value">group</span>  <span class="token arg keyword">aesoc</span>  <span class="token arg keyword">aedecod</span>  <span class="token punctuation">)</span> <span class="token arg keyword">nodupkey</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span>  aesoc  aedecod  <span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> temps1<span class="token punctuation">;</span>
	<span class="token keyword">length</span> counts <span class="token punctuation">$</span><span class="token number">40</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> temps<span class="token punctuation">;</span>
	<span class="token keyword">do</span> trtan<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">;</span>
		counts<span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
		<span class="token keyword">output</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">temps</span><span class="token number">1</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc  aedecod  trtan <span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">sub</span><span class="token number">2</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc  aedecod  trtan<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> sub3<span class="token punctuation">;</span>
	update temps1 sub2 <span class="token punctuation">;</span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc aedecod  trtan<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">sub</span><span class="token number">3</span> <span class="token arg keyword">prefix</span><span class="token operator">=</span><span class="token arg-value">col</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token function keyword">all</span><span class="token punctuation">(</span><span class="token arg keyword">drop</span><span class="token operator">=</span>_:<span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
	<span class="token keyword">by</span>  <span class="token keyword">group</span> aesoc  aedecod <span class="token punctuation">;</span>
	<span class="token keyword">var</span> counts<span class="token punctuation">;</span>
	id trtan<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> final<span class="token punctuation">;</span>
	<span class="token keyword">length</span> text1 <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
	<span class="token keyword">set</span> all<span class="token punctuation">;</span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> aesoc aedecod <span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token keyword">group</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then do</span><span class="token punctuation">;</span>
		aesoc<span class="token operator">=</span><span class="token string">&#39;TEAEs&#39;</span><span class="token punctuation">;</span> 
		text1<span class="token operator">=</span><span class="token string">&#39;TEAEs&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>

	<span class="token keyword">else</span> <span class="token keyword">do</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> aedecod <span class="token operator-keyword operator">ne</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">then</span> text1<span class="token operator">=</span><span class="token string">&quot;&amp;_lineindent1.&quot;</span><span class="token operator">||</span><span class="token function keyword">strip</span><span class="token punctuation">(</span>aedecod<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> text1<span class="token operator">=</span>aesoc<span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">final</span><span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span>  aesoc  aedecod  <span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">***derived ord1 ord2;</span>
<span class="token step keyword">data</span> final<span class="token punctuation">;</span>
	<span class="token keyword">length</span> ord1 ord2 <span class="token number">8</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>
	<span class="token keyword">set</span> final<span class="token punctuation">;</span>
	<span class="token keyword">by</span> <span class="token keyword">group</span>  aesoc  aedecod  <span class="token punctuation">;</span>

	<span class="token keyword">retain</span> ord1 ord2<span class="token punctuation">;</span>

	<span class="token keyword">if</span> first<span class="token punctuation">.</span>aesoc  <span class="token keyword">then</span> ord1<span class="token operator">=</span><span class="token function keyword">input</span><span class="token punctuation">(</span><span class="token function keyword">scan</span><span class="token punctuation">(</span>col999<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">if</span> first<span class="token punctuation">.</span>aedecod   <span class="token keyword">then</span> ord2<span class="token operator">=</span><span class="token function keyword">input</span><span class="token punctuation">(</span><span class="token function keyword">scan</span><span class="token punctuation">(</span>col999<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
 
	text3<span class="token operator">=</span><span class="token string">&#39;n (%)m&#39;</span><span class="token punctuation">;</span>

	<span class="token keyword">array</span> col col1 col2 col3 col4 col5 col98 col999<span class="token punctuation">;</span>
	<span class="token keyword">do over</span> col<span class="token punctuation">;</span>
		<span class="token keyword">if</span> col<span class="token operator">=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then</span> col<span class="token operator">=</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">final</span>  <span class="token punctuation">;</span></span>
	<span class="token keyword">by</span> <span class="token keyword">group</span> descending ord1 aesoc descending ord2  aedecod  <span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%end</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%else</span> <span class="token macro-keyword keyword">%if</span> <span class="token macro-variable">&amp;nobs</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token macro-keyword keyword">%then</span> <span class="token macro-keyword keyword">%do</span><span class="token punctuation">;</span>
<span class="token step keyword">data</span> final<span class="token punctuation">;</span>
	<span class="token keyword">length</span> text1 <span class="token punctuation">$</span><span class="token number">20</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
	<span class="token keyword">call</span> <span class="token function keyword">missing</span><span class="token punctuation">(</span>text1 <span class="token punctuation">,</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">,</span> col4<span class="token punctuation">,</span> col5 <span class="token punctuation">,</span>col98<span class="token punctuation">,</span> col999 <span class="token punctuation">)</span><span class="token punctuation">;</span>
	text1<span class="token operator">=</span><span class="token string">&#39;No data&#39;</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token macro-keyword keyword">%end</span><span class="token punctuation">;</span>

<span class="token comment">***output final dataset;</span>
<span class="token function keyword">%dds_out</span><span class="token punctuation">(</span>data<span class="token operator">=</span>final<span class="token punctuation">,</span> <span class="token keyword">out</span><span class="token operator">=</span>tlf<span class="token punctuation">.</span>T14_3_1_2_SH<span class="token punctuation">,</span> varlist<span class="token operator">=</span>text1 col1 col2 col3 col4 col98 col5  col999 <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token step keyword">proc printto</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码实现4-zhi-xu" tabindex="-1"><a class="header-anchor" href="#代码实现4-zhi-xu" aria-hidden="true">#</a> 代码实现4 - zhi.xu</h2><div class="language-sas line-numbers-mode" data-ext="sas"><pre class="language-sas"><code><span class="token comment">**read adae;</span>
<span class="token step keyword">data</span> adae2<span class="token punctuation">;</span>
    <span class="token keyword">set</span> adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span>     adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b <span class="token keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span>trta <span class="token operator-keyword operator">ne</span> <span class="token string">&#39;Placebo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  adam<span class="token punctuation">.</span><span class="token function keyword">adae</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">if</span> saffl <span class="token operator">=</span> <span class="token string">&quot;Y&quot;</span> <span class="token keyword">and</span> trtemfl<span class="token operator">=</span><span class="token string">&quot;Y&quot;</span>  <span class="token punctuation">;</span>
	<span class="token keyword">if</span> b <span class="token keyword">then do</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">;</span>trta<span class="token operator">=</span><span class="token string">&#39;Active&#39;</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
	<span class="token keyword">if</span> c <span class="token keyword">then do</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>trta<span class="token operator">=</span><span class="token string">&#39;TOTAL&#39;</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
	aebodsys<span class="token operator">=</span>aesoc<span class="token punctuation">;</span>
    aebodsys<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>aebodsys<span class="token punctuation">,</span><span class="token string">&quot;Uncoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aedecod<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>aedecod<span class="token punctuation">,</span><span class="token string">&quot;Uncoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aeall<span class="token operator">=</span><span class="token string">&quot;TEAEs&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token function keyword">missing</span><span class="token punctuation">(</span>atoxgrn<span class="token punctuation">)</span> <span class="token keyword">then</span> atoxgrn<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>

	<span class="token keyword">keep</span> aeall subjid aebodsys aedecod atoxgrn: AETOXGR trtan trta<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span><span class="token number">2</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> _all_<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 

<span class="token comment">**transpose;</span>
<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adae</span><span class="token number">2</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">outRes</span><span class="token number">1</span> <span class="token arg keyword">name</span><span class="token operator">=</span><span class="token arg-value">cat</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> _all_<span class="token punctuation">;</span>
    <span class="token keyword">var</span> aeall aebodsys aedecod<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> outRes2<span class="token punctuation">;</span>
    <span class="token keyword">set</span> outRes1<span class="token punctuation">;</span>
    catn<span class="token operator">=</span><span class="token function keyword">ifn</span><span class="token punctuation">(</span><span class="token function keyword">mod</span><span class="token punctuation">(</span>_n_<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token function keyword">mod</span><span class="token punctuation">(</span>_n_<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">array</span> varlist <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span> col1<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token operator">^</span><span class="token function keyword">missing</span><span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">array</span> catlist aeall aebodsys aedecod<span class="token punctuation">;</span>
    <span class="token keyword">do</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token function keyword">dim</span><span class="token punctuation">(</span>catlist<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> catn<span class="token operator">=</span>i <span class="token keyword">then do</span><span class="token punctuation">;</span>
            <span class="token keyword">do</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token function keyword">dim</span><span class="token punctuation">(</span>catlist<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">call</span> <span class="token function keyword">missing</span><span class="token punctuation">(</span>catlist<span class="token punctuation">{</span>j<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">end</span><span class="token punctuation">;</span>
        <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>


<span class="token step keyword">data</span> _outRes2<span class="token punctuation">;</span>
    <span class="token keyword">set</span> <span class="token function keyword">outRes2</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>ina<span class="token punctuation">)</span> <span class="token function keyword">outRes2</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>inb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> ina <span class="token keyword">then do</span><span class="token punctuation">;</span>
        _level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>call <span class="token function keyword">missing</span><span class="token punctuation">(</span>atoxgrn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> inb <span class="token keyword">then</span> _level<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 

<span class="token comment">**get number of subject;</span>

<span class="token step keyword">proc sql</span> <span class="token proc-args"><span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span><span class="token proc-sql">
<span class="token sql language-sql">    create table worst as 
        select 
            *
        from _outRes2 
        group by _level,trtan,catn,col1,subjid
        having atoxgrn=max(atoxgrn);</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc sql</span> <span class="token proc-args"><span class="token arg keyword">noprint</span><span class="token punctuation">;</span></span><span class="token proc-sql">
<span class="token sql language-sql">    create table outRes3_1 as 
        select 
            distinct 
            _level,
            atoxgrn,
            trtan,
            aeall,aebodsys,aedecod,
            cat,catn,col1,
            count(distinct subjid) as popnum
        from worst 
        group by _level,trtan,catn,col1,atoxgrn;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc sql</span><span class="token punctuation">;</span><span class="token proc-sql">
<span class="token sql language-sql">    create table outRes3_2 as 
        select 
            distinct 
            _level,
            atoxgrn,
            trtan,
            aeall,aebodsys,aedecod,
            cat,catn,col1,
            count(1) as eventnum
        from _outRes2 
        group by _level,trtan,catn,col1,atoxgrn
        order by catn,cat,col1,aeall,aebodsys,aedecod;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc sql</span><span class="token punctuation">;</span><span class="token proc-sql">
<span class="token sql language-sql">    create table outRes3 as 
        select 
            a.*,
            b.popnum
        from outres3_2 a
            left join outres3_1 b
            on a._level=b._level
            and a.trtan=b.trtan
            and a.catn=b.catn
            and a.col1=b.col1
            and a.atoxgrn=b.atoxgrn;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc format</span><span class="token punctuation">;</span>
    value arm
        <span class="token number">1</span><span class="token operator">=</span><span class="token string">&quot;1.0mg/kg&quot;</span>
        <span class="token number">2</span><span class="token operator">=</span><span class="token string">&quot;2.5mg/kg&quot;</span>
        <span class="token number">3</span><span class="token operator">=</span><span class="token string">&quot;5.0mg/kg&quot;</span>
        <span class="token number">4</span><span class="token operator">=</span><span class="token string">&quot;10.0mg/kg&quot;</span>
        <span class="token number">5</span><span class="token operator">=</span><span class="token string">&quot;Placebo&quot;</span>
		<span class="token number">98</span><span class="token operator">=</span><span class="token string">&quot;Active&quot;</span>
		<span class="token number">999</span><span class="token operator">=</span><span class="token string">&quot;TOTAL&quot;</span><span class="token punctuation">;</span>
    value toxgr
        <span class="token number">1</span><span class="token operator">=</span><span class="token string">&quot;1级&quot;</span>
        <span class="token number">2</span><span class="token operator">=</span><span class="token string">&quot;2级&quot;</span>
        <span class="token number">3</span><span class="token operator">=</span><span class="token string">&quot;3级&quot;</span>
        <span class="token number">4</span><span class="token operator">=</span><span class="token string">&quot;4级&quot;</span>
        <span class="token number">5</span><span class="token operator">=</span><span class="token string">&quot;5级&quot;</span>
<span class="token punctuation">;</span>
<span class="token step keyword">quit</span><span class="token punctuation">;</span>

<span class="token step keyword">proc format</span> <span class="token proc-args"><span class="token arg keyword">cntlout</span><span class="token operator">=</span><span class="token function keyword">_temp</span><span class="token punctuation">(</span><span class="token arg keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token arg keyword">fmtname</span> <span class="token arg keyword">in</span> <span class="token punctuation">(</span><span class="token string">&quot;ARM&quot;</span> <span class="token string">&quot;TOXGR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token arg keyword">lib</span><span class="token operator">=</span><span class="token arg-value">work</span><span class="token punctuation">;</span></span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc sql</span><span class="token punctuation">;</span><span class="token proc-sql">
<span class="token sql language-sql">    create table temp as 
        select 
            distinct 
            _level,catn,cat,col1,aeall,aebodsys,aedecod,
            input(strip(b.start),best.) as trtan,
            input(strip(c.start),best.) as atoxgrn
        from outRes3 a
            left join (select * from _temp where fmtname=&quot;ARM&quot;) b on 1=1
            left join (select * from _temp where fmtname=&quot;TOXGR&quot;) c 
                on 
                    case
                        when a._level=2 then 1=1
                        else 1=0
                    end 
        order by 
            _level,trtan,atoxgrn,catn,cat,col1,aeall,aebodsys,aedecod;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">outRes</span><span class="token number">3</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> _level trtan atoxgrn catn cat col1 aeall aebodsys aedecod<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> outRes4<span class="token punctuation">;</span>
    <span class="token keyword">merge</span> <span class="token keyword">temp</span> outRes3<span class="token punctuation">;</span>
    <span class="token keyword">by</span> _level trtan atoxgrn catn cat col1 aeall aebodsys aedecod<span class="token punctuation">;</span>
    format trtan<span class="token punctuation">;</span>
    <span class="token keyword">keep</span> trtan _level atoxgrn aeall aebodsys aedecod catn cat col1 popnum eventnum<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 
<span class="token comment">**get sort Map;</span>
<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">outRes</span><span class="token number">4</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> trtan aeall aebodsys aedecod catn<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">outRes</span><span class="token number">4</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">sortMap</span><span class="token number">1</span> <span class="token arg keyword">suffix</span><span class="token operator">=</span>_<span class="token arg keyword">num</span>_<span class="token arg keyword">temp</span><span class="token punctuation">;</span></span>
    <span class="token keyword">where</span> _level<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 
    <span class="token keyword">by</span> trtan aeall aebodsys aedecod catn<span class="token punctuation">;</span>
    <span class="token keyword">var</span> popnum<span class="token punctuation">;</span>
    id cat<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> sortMap2<span class="token punctuation">;</span>
    <span class="token keyword">set</span> sortMap1<span class="token punctuation">;</span>
    <span class="token keyword">array</span> templist aeall_num_temp aebodsys_num_temp aedecod_num_temp<span class="token punctuation">;</span>
    <span class="token keyword">array</span> varlist aeall_num aebodsys_num aedecod_num<span class="token punctuation">;</span>
    <span class="token keyword">array</span> judgeList aeall_bool aebodsys_bool aedecod_bool<span class="token punctuation">;</span>
    <span class="token keyword">retain</span> aeall_num aebodsys_num<span class="token punctuation">;</span>
    <span class="token keyword">do</span> i<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">to</span> <span class="token function keyword">dim</span><span class="token punctuation">(</span>templist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token operator">^</span><span class="token function keyword">missing</span><span class="token punctuation">(</span>templist<span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">then</span> varlist<span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token operator">=</span>templist<span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> catn<span class="token operator">=</span>i <span class="token keyword">then</span> judgeList<span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> judgeList<span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> aebodsys<span class="token operator">=</span><span class="token string">&quot;Uncoded&quot;</span> <span class="token keyword">then</span> aebodsys_prior<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> aedecod<span class="token operator">=</span><span class="token string">&quot;Uncoded&quot;</span> <span class="token keyword">then</span> aedecod_prior<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">drop</span>  aeall_num_temp aebodsys_num_temp aedecod_num_temp i _name_<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">sortMap</span><span class="token number">2</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> descending aeall_num  aeall descending aeall_bool
       aebodsys_prior descending aebodsys_num aebodsys descending aebodsys_bool    
       aedecod_prior descending aedecod_num aedecod descending aedecod_bool<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> sortMap<span class="token punctuation">;</span>
    <span class="token keyword">set</span> sortMap2<span class="token punctuation">;</span>
    <span class="token keyword">where</span> trtan<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    sortSeq<span class="token operator">=</span>_n_<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">**denom;</span>
<span class="token step keyword">data</span> adsl<span class="token punctuation">;</span>
    <span class="token keyword">set</span> adam<span class="token punctuation">.</span>adsl adam<span class="token punctuation">.</span><span class="token function keyword">adsl</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>a<span class="token punctuation">)</span> adam<span class="token punctuation">.</span><span class="token function keyword">adsl</span><span class="token punctuation">(</span><span class="token operator-keyword operator">in</span><span class="token operator">=</span>b <span class="token keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function keyword">index</span><span class="token punctuation">(</span>trt01a<span class="token punctuation">,</span><span class="token string">&quot;Placebo&quot;</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	trta<span class="token operator">=</span>trt01a<span class="token punctuation">;</span>trtan<span class="token operator">=</span>trt01an<span class="token punctuation">;</span>
    <span class="token keyword">if</span> SAFFL <span class="token operator-keyword operator">eq</span> <span class="token string">&quot;Y&quot;</span> <span class="token keyword">and</span> trtan <span class="token operator-keyword operator">ne</span> <span class="token punctuation">.</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> a <span class="token keyword">then do</span><span class="token punctuation">;</span>
		trta<span class="token operator">=</span><span class="token string">&quot;TOTAL&quot;</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> b <span class="token keyword">then do</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> trta<span class="token operator">^=</span><span class="token string">&#39;&#39;</span> <span class="token keyword">then do</span><span class="token punctuation">;</span>trta<span class="token operator">=</span><span class="token string">&quot;Active&quot;</span><span class="token punctuation">;</span>trtan<span class="token operator">=</span><span class="token number">98</span><span class="token punctuation">;</span>end<span class="token punctuation">;</span>
	<span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">keep</span> usubjid trtan trta<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">**set denom;</span>
<span class="token keyword">options</span><span class="token options-args"> <span class="token arg keyword">missing</span><span class="token operator">=</span><span class="token number">0</span></span><span class="token punctuation">;</span>
<span class="token step keyword">proc tabulate</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">adsl</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token arg-value">denom</span><span class="token punctuation">;</span></span>
    format trtan arm<span class="token punctuation">.</span> <span class="token punctuation">;</span>
    <span class="token keyword">class</span> trtan<span class="token operator">/</span>preloadfmt<span class="token punctuation">;</span>
    <span class="token keyword">table</span> n<span class="token punctuation">,</span>trtan<span class="token operator">/</span> printmiss<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token comment">**get arm freq macro variable;</span>
<span class="token step keyword">data</span> <span class="token keyword">_null_</span><span class="token punctuation">;</span>
    <span class="token keyword">set</span> denom<span class="token punctuation">;</span>
    <span class="token keyword">call</span> <span class="token function keyword">symput</span><span class="token punctuation">(</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&quot;arm&quot;</span><span class="token punctuation">,</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>trt01an<span class="token punctuation">,</span>best<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token function keyword">vvalue</span><span class="token punctuation">(</span>trt01an<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;^(N=&quot;</span><span class="token punctuation">,</span><span class="token function keyword">strip</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>best12<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>
<span class="token keyword">options</span><span class="token options-args"> <span class="token arg keyword">missing</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc sql</span><span class="token punctuation">;</span><span class="token proc-sql">
<span class="token sql language-sql">    create table outRes5 as 
        select 
            a.*,
            case 
                when a.popnum&lt;=0 then &quot;0&quot;
                when b.n&gt;0 then cat(cats(a.popnum),&quot;(&quot;,cats(put(100*a.popnum/b.n,8.1)),&quot;)&quot;)
            end as res_pop,
            cats(a.eventnum) as res_event
        from outRes4 a 
            left join denom b
            on a.trtan=b.trtan;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

<span class="token comment">**merge with sortMap;</span>
<span class="token step keyword">proc sql</span><span class="token punctuation">;</span><span class="token proc-sql">
<span class="token sql language-sql">    create table outRes6(rename=(col1=label)) as 
        select 
            a.*,
            b.sortSeq,
            b.aeall_num,b.aebodsys_num,b.aedecod_num,
            b.aeall_bool,b.aebodsys_bool,b.aedecod_bool,
            b.aebodsys_prior,b.aedecod_prior 
        from outRes5 a 
            left join sortMap b
            on a.aeall=b.aeall
                and a.aebodsys=b.aebodsys
                and a.aedecod=b.aedecod
        order by aeall_num desc,aeall,aeall_bool desc,
                 aebodsys_prior,aebodsys_num desc,aebodsys,aebodsys_bool desc,    
                    aedecod_prior,aedecod_num desc, aedecod,aedecod_bool desc,sortSeq,cat,catn,col1,_level,atoxgrn,trtan;</span>
</span><span class="token step keyword">quit</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">outRes</span><span class="token number">6</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token function keyword">outRes7</span><span class="token punctuation">(</span><span class="token arg keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span>^<span class="token function keyword">missing</span><span class="token punctuation">(</span><span class="token arg keyword">sortSeq</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token arg keyword">prefix</span><span class="token operator">=</span><span class="token arg-value">col</span> <span class="token arg keyword">name</span> <span class="token operator">=</span> __<span class="token arg keyword">cat</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> descending aeall_num aeall descending aeall_bool
       aebodsys_prior descending aebodsys_num aebodsys descending aebodsys_bool
       aedecod_prior descending aedecod_num aedecod descending aedecod_bool
       sortSeq cat catn <span class="token keyword">label</span> _level atoxgrn trtan<span class="token punctuation">;</span>
    <span class="token keyword">var</span> res_pop res_event<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 

<span class="token step keyword">proc transpose</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">outRes</span><span class="token number">7</span> <span class="token arg keyword">out</span><span class="token operator">=</span><span class="token function keyword">outRes8</span><span class="token punctuation">(</span><span class="token arg keyword">where</span><span class="token operator">=</span><span class="token punctuation">(</span>^<span class="token function keyword">missing</span><span class="token punctuation">(</span><span class="token arg keyword">sortSeq</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> descending aeall_num aeall descending aeall_bool
       aebodsys_prior descending aebodsys_num aebodsys descending aebodsys_bool
       aedecod_prior descending aedecod_num aedecod descending aedecod_bool
       sortSeq cat catn <span class="token keyword">label</span> _level atoxgrn<span class="token punctuation">;</span>
    <span class="token keyword">var</span> col1<span class="token punctuation">;</span>
    id __cat trtan<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

 

<span class="token step keyword">data</span> finalRes1<span class="token punctuation">;</span>
    <span class="token keyword">length</span> _label <span class="token punctuation">$</span><span class="token number">200</span><span class="token punctuation">.</span><span class="token punctuation">;</span> 
    <span class="token keyword">set</span> outRes8<span class="token punctuation">;</span>
    <span class="token keyword">by</span> sortSeq<span class="token punctuation">;</span>
    <span class="token keyword">retain</span> _cohort<span class="token punctuation">;</span>
    <span class="token keyword">if</span> first<span class="token punctuation">.</span>sortSeq <span class="token keyword">then</span> _cohort<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> _level<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">then do</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> catn <span class="token operator-keyword operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span> _label<span class="token operator">=</span>label<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> catn <span class="token operator-keyword operator">in</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span> _label<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;_lineindent1.&quot;</span><span class="token punctuation">,</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">do</span><span class="token punctuation">;</span>
        _subgrp<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span><span class="token function keyword">put</span><span class="token punctuation">(</span>atoxgrn<span class="token punctuation">,</span>??toxgr<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&quot;Missing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _subgrpn<span class="token operator">=</span><span class="token function keyword">coalesce</span><span class="token punctuation">(</span>atoxgrn<span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> catn <span class="token operator-keyword operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span> _label<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;_lineindent1.&quot;</span><span class="token punctuation">,</span>_subgrp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> catn <span class="token operator-keyword operator">in</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span> _label<span class="token operator">=</span><span class="token function keyword">cats</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;_lineindent2.&quot;</span><span class="token punctuation">,</span>_subgrp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>
    <span class="token keyword">array</span> varlist res_pop1 res_event1<span class="token punctuation">;</span>
    <span class="token keyword">do over</span> varlist<span class="token punctuation">;</span>
        varlist<span class="token operator">=</span><span class="token function keyword">coalescec</span><span class="token punctuation">(</span>varlist<span class="token punctuation">,</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token comment">/*	RES_POP1 RES_EVENT1*/</span>

	<span class="token keyword">if</span> _SUBGRPN<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token step keyword">proc sort</span> <span class="token proc-args"><span class="token arg keyword">data</span><span class="token operator">=</span><span class="token arg-value">finalRes</span><span class="token number">1</span><span class="token punctuation">;</span></span>
    <span class="token keyword">by</span> sortSeq _cohort _subgrpn<span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>

<span class="token macro-keyword keyword">%let</span> _nobs<span class="token operator">=</span><span class="token macro-variable">&amp;sysnobs</span><span class="token punctuation">.</span><span class="token punctuation">;</span>

<span class="token step keyword">data</span> finalRes2<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token macro-variable">&amp;_nobs</span><span class="token punctuation">.</span><span class="token operator">^=</span><span class="token number">0</span> <span class="token keyword">then</span> <span class="token keyword">set</span> finalRes1<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token macro-variable">&amp;_nobs</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> _label<span class="token operator">=</span><span class="token string">&quot;No Data&quot;</span><span class="token punctuation">;</span>
<span class="token step keyword">run</span><span class="token punctuation">;</span>    

 
<span class="token comment">**output final dataset;</span>
<span class="token function keyword">%dds_out</span><span class="token punctuation">(</span>data<span class="token operator">=</span>finalRes<span class="token punctuation">,</span>out<span class="token operator">=</span>tlf<span class="token punctuation">.</span><span class="token macro-variable">&amp;pgmname</span><span class="token punctuation">.</span><span class="token punctuation">,</span>varlist<span class="token operator">=</span>_label stat_lab res_pop1 res_event1 <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),c=[o];function l(r,i){return s(),a("div",null,c)}const k=n(e,[["render",l],["__file","socpt.html.vue"]]);export{k as default};
